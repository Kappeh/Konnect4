The Connect Four Protocol (CFP) Specification

Description:
    The GUI will be the program that runs the engines. Communication will
    be done through text commands using stdin/stdout.
    
    Each command should end with a newline character (`\n`).

    The engine must always be able to process input from stdin, even while thinking.

    The engine should not start calculating until it is given a `go` command.
    The engine should stop thinking as soon as possible when given a `stop`
    command, and should not start not start calculating again until another
    `go` command.

    Before the engine is asked to search on a position, there will always be a
    position command to tell the engine about the current position.

    If the engine or GUI receives an unknown command or token, it should just ignore
    it and try to parse the rest of the string.

    If the engine receives a command which is not supposed to come, for example a
    `stop` command when the engine isn't calculating, it should just ignore it.

Representations:
    (1) Positions
        Positions will be represented with a 43 character long string.
        Each character will be either "0", "1" or "2". The first 42 characters
        will represent the tiles on the board where "0", "1" and "2" represent:
        empty, player1 tile and player2 tile respectively.
        
        The index of a character within the string represents the tile on the board
        according to the following diagram:

         00 | 01 | 02 | 03 | 04 | 05 | 06
        ----|----|----|----|----|----|----
         07 | 08 | 09 | 10 | 11 | 12 | 13
        ----|----|----|----|----|----|----
         14 | 15 | 16 | 17 | 18 | 19 | 20
        ----|----|----|----|----|----|----
         21 | 22 | 23 | 24 | 25 | 26 | 27
        ----|----|----|----|----|----|----
         28 | 29 | 30 | 31 | 32 | 33 | 34
        ----|----|----|----|----|----|----
         35 | 36 | 37 | 38 | 39 | 40 | 41
        
        The 43rd character denotes which player is to play the next tile
        with "1" and "2" representing player 1 and player 2 respectively.

        The starting position (An empty board, player 1 to play) will thus be:
        "0000000000000000000000000000000000000000001"

    (2) Moves
        A move will be represented by a single character '0' to '6' which
        correspond to the index of the column a tile should be dropped in
        with the far left being '0' and the far right being '6'.

GUI to Engine

    * cfp
        Tell the engine to use CFP.
        This will be sent once as a first command after the program boot
        to tell the engine to switch to cfp mode.
        After receiving the `cfp` command, the engine must identify itself with the `id` command
        and send the `option` commands to tell the GUI which engine settings the engine supports if any.
        After that, the engine should send `cfpok` to acknowledge the CFP mode.
        If no `cfpok` is sent within a certain time period, the engine task will be killed by the GUI.

    * debug [ on | off ]
        Switch the debug mode of the engine on and off.
        In debug mode the engine should send additional `info`s to the GUI, e.g. with the `info` command
        to help debugging, e.g. the commands that the engine has recieved etc.
        This mode should be switched off by default and this command can be sent any time,
        also when the engine is thinking.

    * isready
        This is used to synchronize the engine with the GUI. When the GUI has sent a command or
        multiple commands that can take some time to complete, this command can be
        used to wait for the engine to be ready again or to ping the engine to find out if it is still alive.
        This command is also required once before the engine is asked to do any search to wait
        for the engine to finish initializing.
        This command must always be answered with `readyok` and can be sent also when the engine is calculating
        in which case the engine should also immediately answer with `readyok` without stopping the search.

    * setoption name <name> value <value>
        This is sent to the engine when the user wants to change the internal parameters of the engine.
        One string will be sent for each parameter and this will only be sent when the engine is waiting.
        The name of the option in should not be case sensitive and can include spaces. The same applies for the value.
        The substrings `value` and `name` should be avoided to allow unambiguous parsing.
        For example, do not use = `draw value`. Also, for options of type button, the value is ommited.
        Here are some example string:
            `setoption name Play Style value Normal`
            `setoption name Store Search value True`

    * cfpnewgame
        This is sent to the engine when the next search (started with `position` and `go`) will be from a different game.
        This can be a new game the engine should play or a position to be analysed that is not from the last searched game.
        As the engine's reaction to `cfpnewgame` can take some time, the GUI should always send `isready`
        after `cfpnewgame` to wait for the engine to finish it's operation.
    
    * position [ <position> | startpos ]
        Set up the position described in the `pos`(1) string on the internal board or
        "startpos" will be sent as an alias for the starting position. (Blank board and
        player1's turn). Note: no `new` command is needed. However, if this position is
        from a different game than the last position sent to the engine, the GUI should
        have sent a `cfpnewgame` inbetween.

    * go [movetime <movetime>]
        Start calculating on the current position set up with the `position` command.
        Before a GUI asks for the move your engine suggests, a `stop` command will be sent.
        You can keep calculating until then.
        Optionally, a move time will be sent which is the maximum amount of time the engine
        should expect to analyse the current position in seconds.
    
    * stop
        Stop calculating as soon as possible.
        Stop must be responded to with the `bestmove` command.
    
    * quit
        Quit the program as soon as possible.

Engine to GUI

    * id
        * name <name>
            This must be sent after recieving the `cfp` command to identify the engine.
            E.g. `id name Connect4Engine 1.1`

        * author <author>
            This must be sent after recieving the `cfp` command to identify the engine.
            E.g. `id author Kieran Powell`
    
    * cfpok
        Must be sent after the id and optional options to tell the GUI that the engine
        has sent all the infos and is ready in CFP mode.
    
    * readyok
        This must be sent when the engine has recieved an `isready` command and processed all input
        and is ready to accept new commands.
        It is usually sent after a command that can take some time to be able to wait for the engine,
        but it can be used anytime, even when the engine is thinking.
    
    * bestmove <move>
        The engine has stopped searching and found the move best in the position.
        This must be sent directly after recieving a `stop` command.
        Best move must be followed by the index of the column of the best move
        as explained in `moves`(2).
        For example, if the best move is to drop a tile in the middle column,
        the engine should send `bestmove 3` after recieving a `stop` command.
        
    * info <message>
        The engine wants to send information to the GUI. This will be printed in the gui output terminal.
        Examples include:
            `info Forced win found in 5 moves`
            `info DEBUG: An error has occured`
        Note that this is simply semantic; the GUI will simply print this to an output and nothing else.
        If the engine is in debug mode, this is where you will print your debug information.
    
    * option
        This command tells the GUI which parameters can be changed in the engine.
        This should be sent once at engine startup after the `cfp` and `id` commands
        if any paramters can be changed in the engine.
        The GUI should parse this and build a dialog for the user to change the settings.
        If the user wants to change some settings, the GUI will send a `setoption` command to the engine.
        Note that the GUI need not send the `setoption` command when starting the engine for every option if
        it doesn't want to change the default value.
        For all allowed combinations see the example below, as some combinations of this tokens don't make sense.
        One string will be sent for each parameter.

        * name <name>
            The option has the name id.
        
        * type <type>
            The optiona has a type t.

            * check
                A checkbox that can be either true or false.
            
            * spin
                A spin wheel that can be an integer in a certain range.
            
            * combo
                A combo box that can have different predefinied string values.
            
            * button
                A button that can be pressed to send a command to the engine.

            * string
                A text field that has a string as a value. An empty string has the value "".

        * default <default>
            The default value of the parameter is x

        * min <min>
            The minumum value of the parameter. (Only for type spin)

        * max <max>
            The maximum value of the parameter. (Only for type spin)

        * var <var>
            A predefined value of the parameter. (Only used for combo)

        Examples:
            `option name Store Search type check default true`
            `option name Search Depth type spin default -1 min -1 max 100`
            `option name Play Style type combo default Normal var Solid var Normal var Risky`
            `option name Clear type button`
            `option name Open Book Path type string default Null`
        Note that these commands will allow the GUI to show the options to the user. Once the user
        changes an option, the GUI will send the relevant `setoption` command and it is the engines
        job to parse it and change it's internal parameters.

Example Transactions:

    (1) When the GUI starts up the engine, this is how the communication can look

        // GUI tells the engine to use CFP mode
        -->Engine:  "cfp\n"
        
        // Engine identifies itself
        <--Engine:  "id name MyEngine 1.1\n"
                    "id author Kieran Powell\n"
        
        // Engine sends options it can change
        <--Engine:  "option name Clear type button\n"
                    "option name Search Depth type spin default -1 min -1 max 100\n"
        
        // Engine has sent all parameters and is ready
        <--Engine:  "cfpok\n"

        // Note that here the GUI can already send a `quit` command if it wants to find out
        // details about the engine, so the engine shouldn't initialize its internal parameters before here.

        // Let's pretend the user changes the search depth and turns on debug mode
        -->Engine:  "setoption name Search Depth value 20\n"
        -->Engine:  "debug on\n"

        // The GUI wants to wait for the engine to finish initializing
        -->Engine:  "isready\n"

        // The Engine finishes setting up and is ready for more commands
        <--Engine:  "readyok\n"

    (2) The engine is ready for more commands and the GUI wants to start a new game
        and for the engine to take the first turn

        // The GUI sets up the new game
        -->Engine:  "cfpnewgame\n"
        -->Engine:  "position startpos"

        // The GUI waits for the engine to finish setting up the position
        -->Engine:  "isready\n"
        <--Engine:  "readyok\n"

        // The GUI tells the engine to start thinking
        -->Engine:  "go\n"

        // Let's say the GUI gives the engine some time to think here,
        // and now it want's an answer.
        -->Engine:  "stop\n"

        // For each `stop` command, the engine must provide a `bestmove` command
        // in response
        <--Engine:  "bestmove 3\n"